package main

import "fmt"

/*
1、切片
切片（slice）本身并非动态数组或数组指针。它内部通过指针引用底层数组，设定相关属性将数据读写操作限定在指定区域内
属性cap表示切片所引用数组片段的真实长度，len用于限定可读的写元素数量
2、初始化
可直接创建切片对象，无须预先准备数组。因为是引用类型，须使用make函数或显式初始化语句，它会自动完成底层数组内存分配。
3、
很显然，切片只是很小的结构体对象，用来代替数组传参可避免复制开销。
还有，make函数允许在运行期动态指定数组长度，绕开了数组类型必须使用编译期常量的限制
4、
并非所有时候都适合用切片代替数组，因为切片底层数组可能会在堆上分配内存。而且小数组在栈上拷贝的消耗也未必就比make代价大
*/
func main() {
	s1 := make([]int, 3, 5)     // 指定len、cap，底层数组初始化为零值
	s2 := make([]int, 3)        // 省略cap，和len相等
	s3 := []int{10, 20, 10: 30} // 按初始化元素分配底层数组，并设置len、cap
	fmt.Println(s1, len(s1), cap(s1))
	fmt.Println(s2, len(s2), cap(s2))
	fmt.Println(s3, len(s3), cap(s3))
}
