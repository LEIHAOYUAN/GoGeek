package main

import "fmt"

/**
字典（哈希表）是一种使用频率极高的数据结构。将其作为语言内置类型，从运行时层面进行优化，可获得更高效的性能。
作为无序键值对集合，字典要求key必须是支持相等运算符（==、!=）的数据类型，比如，数字、字符串、指针、数组、结构体，以及对应接口类型。
字典是引用类型，使用make函数或初始化表达语句来创建。
1、字典对象本身就是指针包装，传参时无须再次取地址。
2、在创建时预先准备足够空间有助于提升性能，减少扩张时的内存分配和重新哈希操作。
3、对于海量小对象，应直接用字典存储键值数据拷贝，而非指针。这有助于减少需要扫描的对象数量，大幅缩短垃圾回收时间。
4、另外，字典不会收缩内存，所以适当替换成新对象是必要的。
*/
func main() {
	m := make(map[string]int)
	m["a"] = 1
	m["b"] = 2

	m2 := map[int]struct { // 值为匿名结构类型
		x int
	}{
		1: {x: 100}, // 可省略key、value类型标签
		2: {x: 200},
	}

	fmt.Println(m, m2)
}
